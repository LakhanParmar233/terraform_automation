pipeline {
    agent any

    parameters {
        string(name: 'REGION', description: 'Terraform region variable')
        string(name: 'INSTANCE_TYPE', description: 'Terraform instance_type variable')
        string(name: 'TAG_NAME', description: 'Terraform tag_name variable')
        string(name: 'AMI_ID', description: 'Terraform ami_id variable')
        string(name: 'ACTION', description: 'Enter "plan" or "apply"', defaultValue: 'plan')
    }

    stages {
        stage('User Input') {
            steps {
                script {
                    def userInput = input(
                        message: 'Choose Terraform action:',
                        parameters: [
                            choice(choices: ['plan', 'apply'], description: 'Select "plan" or "apply"', name: 'ACTION')
                        ]
                    )
                }
            }
        }

        stage('Modify terraform.tfvars') {
            when {
                expression { params.ACTION == 'plan' }
            }
            steps {
                script {
                    def terraformVarsFile = "${WORKSPACE}/terraform.tfvars"

                    // Read the content of terraform.tfvars
                    def terraformVarsContent = readFile(terraformVarsFile)

                    // Replace variables with Jenkins parameters
                    terraformVarsContent = terraformVarsContent.replaceAll(/region = ".+"/, "region = \"${params.REGION}\"")
                    terraformVarsContent = terraformVarsContent.replaceAll(/instance_type = ".+"/, "instance_type = \"${params.INSTANCE_TYPE}\"")
                    terraformVarsContent = terraformVarsContent.replaceAll(/tag_name = ".+"/, "tag_name = \"${params.TAG_NAME}\"")
                    terraformVarsContent = terraformVarsContent.replaceAll(/ami_id = ".+"/, "ami_id = \"${params.AMI_ID}\"")

                    // Write the modified content back to terraform.tfvars
                    writeFile(file: terraformVarsFile, text: terraformVarsContent)
                }
            }
        }

        stage('Terraform Init') {
            when {
                expression { params.ACTION == 'plan' }
            }
            steps {
                // Execute 'terraform init'
                sh 'terraform init'
            }
        }

        stage('Terraform Apply or Plan') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                // Execute 'terraform apply' when ACTION is 'apply'
                sh 'terraform apply -auto-approve'
            }
            post {
                failure {
                    script {
                        // Handle failure when ACTION is 'apply'
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'plan' }
            }
            steps {
                // Execute 'terraform plan' when ACTION is 'plan'
                sh 'terraform plan'
            }
        }
    }
}
